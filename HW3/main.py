import random
import math


def matrix_mul(mat1, mat2):
    result = []
    for i in range(0, len(mat1)):
        temp = []
        for j in range(0, len(mat2[0])):
            temp.append(0)
        result.append(temp)

    for i in range(0, len(mat1)):
        for j in range(0, len(mat2[0])):
            sum = 0.0
            for k in range(0, len(mat2)):
                sum = sum + mat1[i][k] * mat2[k][j]
            result[i][j] = sum

    return result


def matrix_add(mat1, mat2):
    result = []
    for i in range(0, len(mat1)):
        temp = []
        for j in range(0, len(mat2[0])):
            temp.append(0)
        result.append(temp)

    for i in range(0, len(mat1)):
        for j in range(0, len(mat2[0])):
            result[i][j] = mat1[i][j] + mat2[i][j]

    return result


def relu(mat):
    for i in range(0, len(mat)):
        for j in range(0, len(mat[0])):
            if mat[i][j] < 0:
                mat[i][j] = 0
    return mat


def forward_prop(input_matrix, layers, weights, biases, relu_list):
    # used to iterate through the list
    index = 0
    temp = input_matrix.copy()
    for i in range(0, layers):  # goes through number of layers
        temp = matrix_mul(weights[i], temp)
        temp = matrix_add(temp, biases[i])
        if relu_list[i]:
            temp = relu(temp)

    return temp

def random_opt(num_iter, error, input_matrix, layers, weights, biases, relu_list):
    best_input = []
    for i in range(0, len(input_matrix)):
        best_input.append([random.uniform(-500.0, 500.0)])
    best_result = forward_prop(best_input, layers, weights, biases, relu_list)
    best_sum = 0
    for i in range(0, len(best_result)):
        for j in range(0, len(best_result[0])):
            best_sum += abs(best_result[i][j])

    test_input = []
    for i in range(0, len(input_matrix)):
        test_input.append([random.uniform(-500.0, 500.0)])

    for itr in range(num_iter):
        for i in range(0, len(input_matrix)):
            test_input[i] = [random.uniform(-500.0, 500.0)]
        test_result = forward_prop(test_input, layers, weights, biases, relu_list)
        test_sum = 0
        for i in range(0, len(test_result)):
            for j in range(0, len(test_result[0])):
                test_sum += abs(test_result[i][j])
        if test_sum < best_sum:
            best_input = test_input.copy()
            best_sum = test_sum

        if best_sum < error:
            break

    return best_input


def cem(num_iter, error, input_matrix, layers, weights, biases, relu_list):
    list_of_means = []
    for i in range(0, len(input_matrix)):
        list_of_means.append(random.uniform(-1.0, 1.0))

    list_of_sd = []
    for i in range(0, len(input_matrix)):
        list_of_sd.append(1.0)

    t = 0
    sample_size = 2000
    selection_num = 25
    n_solutions = []            # Will save the list of tuples of input matrix and its computed solutions

    while t < num_iter and sum(list_of_sd) > error:
        n_solutions = []
        for i in range(0, sample_size):
            attempted_sol = []

            for j in range(0, len(input_matrix)):
                attempted_sol.append([random.gauss(list_of_means[j], list_of_sd[j])])

            result = forward_prop(attempted_sol, layers, weights, biases, relu_list)
            # print(result)
            result_sum = 0
            for j in range(0, len(result)):
                for k in range(0, len(result[0])):
                    result_sum += abs(result[j][k])

            n_solutions.append((attempted_sol, result_sum))

        n_solutions = sorted(n_solutions, key=lambda x: x[1])

        n_solutions = n_solutions[:selection_num]
        # Calculating means
        for i in range(0, len(input_matrix)):
            list_of_means[i] = 0
            for j in range(0, selection_num):
                list_of_means[i] += n_solutions[j][0][i][0]
            list_of_means[i] = list_of_means[i] / selection_num

        # Calculating SD's using std = sqrt(mean(x)) , where x = abs(a - a.mean())**2
        for i in range(0, len(input_matrix)):
            mean_x = 0.0
            for j in range(0, selection_num):
                mean_x += abs(n_solutions[j][0][i][0] - list_of_means[i])**2
            list_of_sd[i] = math.sqrt(mean_x / selection_num) + (0.1/(t+1))

        t = t+1
    return list_of_means


# Press the green button in the gutter to run the script.
if __name__ == '__main__':

    input_matrix = []  # starting point
    input_rows = 1
    input_cols = 5
    for i in range(0, input_rows):
        temp = []
        for j in range(0, input_cols):
            temp.append(0)
        input_matrix.append(temp)
    """
    # Problem 1
    layers = 1
    weights = [
        [[3.0]]
    ]
    biases = [
        [[4.0]]
    ]
    relu_list = [
        False
    ]
    """
    """
    # Problem 2
    layers = 3
    weights = [
        [[-4.0, -5.0, 1.0, -2.0], [-5.0, 3.0, 0.0, -9.0], [-4.0, 9.0, -4.0, 5.0], [3.0, 5.0, 9.0, -2.0],
         [-8.0, -6.0, 1.0, 6.0]],  # weights 1
        [[9.0, 0.0, 3.0, 6.0, 7.0], [4.0, -9.0, 8.0, 3.0, -3.0], [-6.0, -4.0, -3.0, -8.0, 0.0],
         [4.0, 9.0, -4.0, 4.0, -8.0], [-4.0, 0.0, 0.0, -3.0, 6.0]],  # weights 2
        [[-4.0, -2.0, 6.0, 0.0, 4.0]],  # weights 3
    ]
    biases = [
        [[-3.0], [-7.0], [6.0], [-9.0], [9.0]],  # biases 1
        [[-2.0], [7.0], [0.0], [-5.0], [6.0]],  # biases 2
        [[0.0]],  # biases 3
    ]
    relu_list = [
        True,  # relu 1
        True,  # relu 2
        False  # relu 3
    ]
    """
    """
    # Problem 3
    layers = 2
    weights = [
        [[2.0, 8.0, -5.0, -4.0, -6.0, 2.0], [7.0, -8.0, 3.0, -1.0, -7.0, 7.0], [-2.0, 0.0, 1.0, 8.0, -1.0, 6.0],
         [-7.0, 4.0, -2.0, 2.0, 4.0, -2.0], [-1.0, 3.0, 0.0, -9.0, 8.0, 6.0]],  # weights 1
        [[0.0, 0.0, 0.0, 4.0, -3.0], [-9.0, -9.0, 8.0, -6.0, 0.0], [-2.0, 1.0, 0.0, -5.0, 4.0]],  # weights 2
    ]
    biases = [
        [[7.0], [6.0], [-9.0], [0.0], [-2.0]],  # biases 1
        [[-5.0], [-6.0], [4.0]],  # biases 2
    ]
    relu_list = [
        True,  # relu 1
        False,  # relu 2
    ]
    """
    """
    # Problem 4
    layers = 3
    weights = [
        [[-1.0], [-4.0], [-8.0], [-2.0], [-6.0], [4.0], [1.0], [-1.0], [7.0], [0.0]],  # weights 1
        [[-1.0, -4.0, -4.0, -9.0, -7.0, 9.0, -8.0, -2.0, -6.0, -6.0],
         [1.0, -8.0, -1.0, 4.0, 2.0, -5.0, -8.0, -6.0, -5.0, 7.0],
         [0.0, -4.0, -7.0, -1.0, 0.0, -7.0, 6.0, -9.0, 9.0, 4.0],
         [3.0, -7.0, -7.0, 0.0, 3.0, 6.0, 9.0, 9.0, -9.0, 3.0],
         [-6.0, 1.0, 0.0, 7.0, 8.0, 3.0, -9.0, -5.0, -9.0, -5.0]],  # weights 2
        [[-7.0, -3.0, 6.0, -2.0, 5.0]]  # weights 3
    ]
    biases = [
        [[3.0], [-9.0], [4.0], [6.0], [-4.0], [-9.0], [-9.0], [-9.0], [-8.0], [-8.0]],  # biases 1
        [[1.0], [8.0], [0.0], [-1.0], [-7.0]],  # biases 2
        [[-3.0]]  # biases 3
    ]
    relu_list = [
        True,  # relu 1
        True,  # relu 2
        False  # relu 3
    ]
    """
    """
    # Problem 5
    layers = 3
    weights = [
        [[0.0, -4.0, 8.0, 8.0], [-2.0, 6.0, 2.0, -8.0], [-8.0, 5.0, 8.0, -5.0], [-6.0, -7.0, -6.0, 0.0],
         [-4.0, 4.0, 0.0, -9.0], [-9.0, 9.0, 9.0, 7.0], [-4.0, -5.0, -4.0, -6.0],
         [-8.0, 7.0, -4.0, -3.0], [0.0, 6.0, -2.0, -4.0], [8.0, 0.0, -9.0, 1.0]],  # weights 1
        [[9.0, 6.0, -6.0, -3.0, 7.0, -3.0, 8.0, -4.0, 0.0, -8.0], [-1.0, -2.0, -7.0, 0.0, 2.0, -9.0, -5.0, 5.0, 0.0, 9.0],
         [-5.0, -4.0, 9.0, 8.0, -7.0, 2.0, 7.0, 7.0, 0.0, 0.0], [-4.0, 5.0, 1.0, -9.0, 1.0, 0.0, -9.0, 2.0, -1.0, -2.0],
         [-3.0, -9.0, 8.0, 3.0, 0.0, 9.0, 4.0, 3.0, -8.0, 8.0], [-7.0, -4.0, -9.0, 3.0, 0.0, 1.0, 2.0, -9.0, -5.0, 1.0],
         [0.0, 3.0, 6.0, -7.0, -8.0, -4.0, 1.0, -7.0, 2.0, 8.0], [-2.0, 5.0, 0.0, -4.0, 5.0, 7.0, 0.0, 6.0, -8.0, 1.0],
         [6.0, 5.0, 3.0, -5.0, -8.0, 3.0, 4.0, 2.0, 6.0, 5.0], [0.0, -3.0, 9.0, 1.0, -4.0, -5.0, 4.0, 4.0, 2.0, -2.0]],  # weights 2
        [[5.0, -1.0, -8.0, 9.0, -6.0, -1.0, -6.0, 2.0, -7.0, -4.0], [9.0, -2.0, 6.0, 4.0, 7.0, -6.0, 5.0, 5.0, 0.0, -8.0],
         [0.0, -4.0, 9.0, -3.0, -7.0, -2.0, 6.0, 2.0, 7.0, -5.0], [5.0, -5.0, 7.0, -8.0, 9.0, -6.0, 2.0, -8.0, 6.0, 4.0]]  # weights 3
    ]
    biases = [
        [[2.0], [-5.0], [0.0], [1.0], [4.0], [5.0], [5.0], [-2.0], [9.0], [-1.0]],  # biases 1
        [[-1.0], [-4.0], [-1.0], [6.0], [5.0], [3.0], [-9.0], [-6.0], [8.0], [9.0]],  # biases 2
        [[8.0], [-3.0], [2.0], [9.0]] # biases 3
    ]
    relu_list = [
        True,  # relu 1
        True,  # relu 2
        False  # relu 3
    ]
    """
    """
    # Problem 6
    layers = 3
    weights = [
        [[0.0, -9.0, -5.0, -5.0, 0.0, 7.0, -4.0, 7.0, 2.0, 4.0, -5.0, 8.0, -4.0, -8.0, 0.0, 0.0, -4.0, 3.0, 3.0, -4.0,
          -6.0, 0.0, 3.0, 5.0, -3.0, 0.0, -9.0, -3.0, -7.0, -8.0, -8.0, 7.0, 2.0, 7.0, -5.0, 6.0, 5.0, -5.0, -4.0, -2.0,
          -4.0, -9.0, 2.0, -7.0, 8.0, -4.0, -8.0, -4.0, -4.0, 0.0, 0.0, 8.0, -1.0, 8.0, -3.0, 4.0, 7.0, 6.0, -6.0, -1.0,
          0.0, 6.0, -8.0, 0.0, 4.0, 8.0, -6.0, 3.0, -2.0, 0.0, -4.0, 6.0, 5.0, 3.0, 5.0, 8.0, -7.0, 2.0, 8.0, -5.0, 9.0,
          -6.0, 2.0, -9.0, 8.0, 5.0, -7.0, 6.0, -1.0, -1.0, 5.0, -7.0, 6.0, 0.0, 2.0, -9.0, -4.0, 6.0, 1.0, -6.0],
         [-3.0, 0.0, 0.0, 8.0, -2.0, -9.0, -1.0, -3.0, -3.0, -7.0, 8.0, 2.0, 6.0, -9.0, 0.0, 1.0, 3.0, 5.0, 1.0, 2.0,
          2.0, 0.0, 6.0, 3.0, 8.0, 8.0, 0.0, 7.0, -1.0, -2.0, 0.0, 6.0, 1.0, -9.0, 2.0, -4.0, 7.0, 6.0, -9.0, -6.0,
          -2.0, 1.0, -3.0, 9.0, 3.0, -3.0, 3.0, -5.0, -9.0, 8.0, 9.0, 6.0, 1.0, 9.0, 3.0, 0.0, 3.0, 2.0, -8.0, 4.0,
          -9.0, 9.0, 6.0, 6.0, 8.0, 6.0, -5.0, 5.0, 6.0, -7.0, 0.0, -3.0, 2.0, -1.0, 9.0, -8.0, 4.0, -6.0, 6.0, 6.0,
          4.0, 9.0, -2.0, -7.0, -9.0, 8.0, 9.0, -6.0, -8.0, -3.0, -8.0, -2.0, 8.0, 6.0, 7.0, 6.0, 9.0, 6.0, -8.0, -9.0],
         [-4.0, 4.0, 0.0, 0.0, 9.0, 1.0, 0.0, 0.0, -2.0, -4.0, -8.0, -8.0, 3.0, 3.0, -5.0, 4.0, 3.0, -3.0, -5.0, -7.0,
          -8.0, 6.0, 0.0, -1.0, -5.0, 5.0, 1.0, 1.0, 3.0, 4.0, 1.0, 3.0, -7.0, -6.0, 4.0, 2.0, -3.0, 0.0, -4.0, 3.0,
          7.0, 6.0, -1.0, 6.0, 0.0, 8.0, 7.0, 7.0, -9.0, 6.0, 3.0, -8.0, 0.0, -5.0, -9.0, 2.0, 5.0, -8.0, -2.0, 3.0,
          -2.0, -1.0, -6.0, -5.0, -2.0, 0.0, 9.0, -8.0, -5.0, 2.0, 0.0, -3.0, 5.0, -3.0, 0.0, -8.0, -9.0, 4.0, 6.0,
          7.0, 7.0, 2.0, -2.0, -2.0, 5.0, 0.0, 9.0, 1.0, -1.0, 2.0, -9.0, -2.0, 0.0, -9.0, 5.0, -7.0, -9.0, -6.0, 2.0, -8.0],
         [4.0, 4.0, 2.0, -2.0, -3.0, -1.0, -3.0, 6.0, 0.0, 5.0, 2.0, 5.0, 7.0, 3.0, 2.0, 5.0, 3.0, 5.0, -1.0, 7.0, 6.0,
          -5.0, 3.0, -4.0, -7.0, 8.0, -6.0, -3.0, 2.0, 5.0, -6.0, -1.0, 3.0, 1.0, 8.0, -5.0, -3.0, 2.0, 8.0, 4.0, -8.0,
          -7.0, 7.0, -4.0, 7.0, -3.0, -8.0, -5.0, -2.0, 7.0, 7.0, -9.0, 4.0, -4.0, -4.0, -5.0, 2.0, -8.0, 4.0, 6.0, -4.0,
          -5.0, 6.0, -6.0, -9.0, 4.0, -9.0, 4.0, 0.0, -6.0, -6.0, -2.0, 7.0, -2.0, 3.0, 8.0, 0.0, -5.0, 1.0, -5.0, -3.0,
          -7.0, -1.0, -9.0, 4.0, 1.0, 6.0, -9.0, 4.0, -1.0, 6.0, -7.0, 7.0, 0.0, -6.0, 0.0, 0.0, 0.0, 7.0, -3.0],
         [1.0, 8.0, 5.0, -1.0, 8.0, 6.0, -7.0, 8.0, -4.0, -7.0, -7.0, 5.0, 9.0, 6.0, 9.0, 4.0, 9.0, 0.0, 6.0, -4.0, -2.0,
          9.0, -1.0, -2.0, 0.0, 0.0, 8.0, 7.0, 2.0, -4.0, 2.0, 7.0, 2.0, 6.0, 5.0, 1.0, 9.0, 0.0, -2.0, 2.0, -8.0, 4.0,
          -1.0, -1.0, 3.0, -5.0, 0.0, 4.0, -9.0, -7.0, -2.0, -1.0, 7.0, -2.0, 4.0, -1.0, 8.0, 0.0, 6.0, -9.0, 5.0, 3.0,
          8.0, 5.0, 4.0, 8.0, 9.0, -5.0, -2.0, 0.0, 5.0, 2.0, -5.0, 9.0, -4.0, -9.0, 1.0, -1.0, -9.0, 0.0, 2.0, -7.0,
          -1.0, -3.0, -6.0, -7.0, 9.0, 3.0, -1.0, 7.0, 4.0, 0.0, 5.0, -8.0, 8.0, 3.0, 3.0, -6.0, 9.0, 8.0],
         [6.0, -8.0, -3.0, -9.0, 3.0, 8.0, -5.0, -2.0, 0.0, -3.0, 0.0, -5.0, 0.0, -5.0, 8.0, -2.0, -1.0, -2.0, 5.0, 3.0,
          -1.0, 7.0, 0.0, -6.0, -2.0, 1.0, -6.0, 0.0, 2.0, 4.0, 2.0, 0.0, 1.0, -3.0, 0.0, -8.0, -6.0, 0.0, -2.0, 6.0,
          4.0, 1.0, 3.0, 0.0, 0.0, -1.0, -4.0, -5.0, -8.0, -9.0, -3.0, 8.0, -4.0, -2.0, -2.0, 0.0, -2.0, -1.0, 8.0, -3.0,
          -6.0, -3.0, 7.0, -6.0, -9.0, 7.0, -2.0, 0.0, -4.0, 2.0, 6.0, -8.0, -6.0, -5.0, -8.0, 7.0, 3.0, -4.0, 7.0, -9.0,
          -9.0, 6.0, 5.0, 6.0, 6.0, 2.0, -7.0, 2.0, 4.0, -1.0, -8.0, 4.0, 4.0, -2.0, 4.0, -5.0, -9.0, -1.0, 6.0, -5.0],
         [-5.0, 2.0, -7.0, -7.0, 7.0, 1.0, 0.0, 0.0, -7.0, -3.0, -9.0, 9.0, 9.0, 0.0, -5.0, -3.0, 0.0, -5.0, -2.0, -5.0,
          -8.0, 8.0, -9.0, 9.0, -3.0, -9.0, -5.0, 0.0, 9.0, 0.0, -4.0, 5.0, -8.0, -5.0, -3.0, 7.0, -8.0, 0.0, 0.0, -4.0,
          0.0, 9.0, -5.0, 1.0, 4.0, 3.0, 0.0, 1.0, 4.0, 4.0, -4.0, 0.0, -5.0, 0.0, 8.0, 1.0, 0.0, 4.0, -9.0, 8.0, 5.0,
          -5.0, 0.0, -1.0, -2.0, -5.0, 0.0, -4.0, -5.0, -5.0, -7.0, -5.0, 8.0, -1.0, 7.0, 2.0, 5.0, 4.0, -6.0, -9.0,
          8.0, 5.0, 7.0, -2.0, 0.0, -8.0, 4.0, 7.0, 5.0, -9.0, 8.0, -7.0, 9.0, -3.0, -9.0, 5.0, -9.0, -8.0, -5.0, -3.0],
         [2.0, 7.0, -2.0, 3.0, 3.0, 5.0, 7.0, 9.0, 7.0, -5.0, -8.0, 7.0, 0.0, 5.0, 7.0, 7.0, 1.0, -4.0, 7.0, 0.0, -7.0,
          9.0, 3.0, 4.0, -6.0, 0.0, -2.0, 2.0, -8.0, -4.0, 0.0, 9.0, 1.0, 4.0, -5.0, 9.0, -7.0, 4.0, 7.0, 7.0, -8.0,
          -7.0, 5.0, 8.0, -2.0, -6.0, -3.0, 2.0, -7.0, 1.0, 4.0, -2.0, -8.0, -9.0, -8.0, 2.0, -6.0, 9.0, -8.0, -5.0,
          -1.0, -7.0, -4.0, -2.0, -6.0, -3.0, -8.0, -2.0, 0.0, -6.0, -7.0, 5.0, -3.0, -2.0, -9.0, 2.0, -7.0, 7.0, 3.0,
          0.0, 0.0, -4.0, -1.0, 3.0, -8.0, 2.0, -4.0, 1.0, -7.0, 7.0, 0.0, -8.0, -3.0, -2.0, -1.0, -8.0, -8.0, -3.0,
          7.0, -7.0],
         [-1.0, -7.0, 0.0, 1.0, 7.0, 9.0, -3.0, -2.0, 8.0, 7.0, -1.0, -6.0, 5.0, 8.0, 0.0, 3.0, 6.0, 4.0, -6.0, -5.0,
          -5.0, 9.0, -3.0, -3.0, -6.0, 8.0, -4.0, -4.0, 4.0, 9.0, -7.0, 1.0, -8.0, 7.0, -5.0, 0.0, 9.0, 9.0, -1.0, 0.0,
          -7.0, 8.0, 0.0, -1.0, 5.0, 1.0, 1.0, -9.0, 0.0, 0.0, -7.0, 9.0, 4.0, 3.0, -6.0, 5.0, 4.0, 9.0, 0.0, 7.0, 9.0,
          4.0, 7.0, 7.0, -2.0, 3.0, -4.0, 0.0, 5.0, 0.0, 5.0, -3.0, 5.0, 0.0, -7.0, 9.0, 8.0, 3.0, 5.0, -4.0, 6.0, -8.0,
          -6.0, 6.0, 0.0, 2.0, 0.0, 0.0, 6.0, 9.0, 0.0, -3.0, -4.0, -9.0, 2.0, -1.0, -4.0, 7.0, 1.0, -6.0],
         [-6.0, 5.0, 1.0, -2.0, -6.0, -4.0, -3.0, 2.0, -1.0, -1.0, 7.0, 9.0, 2.0, 3.0, 5.0, 3.0, 4.0, 8.0, 6.0, 6.0,
          3.0, 3.0, 8.0, 1.0, -4.0, -2.0, 9.0, 8.0, 3.0, 0.0, -3.0, 5.0, 9.0, -4.0, 5.0, -1.0, 8.0, 9.0, -9.0, 6.0,
          8.0, -1.0, -3.0, -6.0, 2.0, 5.0, 0.0, 0.0, -5.0, 9.0, -9.0, 0.0, -6.0, 4.0, 3.0, 4.0, -8.0, -8.0, 1.0, -3.0,
          -1.0, 3.0, 2.0, 6.0, 9.0, -9.0, -2.0, 0.0, -5.0, -1.0, 4.0, 8.0, -8.0, 9.0, -4.0, 2.0, 7.0, -5.0, 2.0, 1.0,
          7.0, 0.0, -2.0, -2.0, -4.0, 5.0, -6.0, 7.0, 8.0, -6.0, -1.0, -4.0, 7.0, 3.0, -4.0, 7.0, -2.0, 3.0, 6.0, -8.0]],  # weights 1
        [[5.0, -9.0, 2.0, 0.0, 0.0, 8.0, -7.0, -8.0, -6.0, -4.0], [-3.0, -8.0, 4.0, -1.0, -5.0, 9.0, 1.0, 8.0, -8.0, 8.0],
         [6.0, -2.0, 5.0, 9.0, 6.0, 9.0, 6.0, -2.0, -1.0, 9.0], [-3.0, -4.0, -6.0, -1.0, 7.0, 5.0, 3.0, -1.0, -6.0, -8.0],
         [-2.0, -7.0, 6.0, -3.0, 8.0, -1.0, -4.0, 0.0, -9.0, 0.0]],  # weights 2
        [[8.0, 8.0, -2.0, 0.0, 9.0]]  # weights 3
    ]
    biases = [
        [[6.0], [-8.0], [9.0], [-7.0], [3.0], [-3.0], [-4.0], [9.0], [-8.0], [-5.0]],  # biases 1
        [[1.0], [6.0], [-6.0], [4.0], [-7.0]],  # biases 2
        [[-1.0]]  # biases 3
    ]
    relu_list = [
        True,  # relu 1
        True,  # relu 2
        False  # relu 3
    ]
    """
    """
    # Problem 7
    layers = 3
    weights = [
        [[-9.0, -5.0, -7.0, -9.0, -3.0, -3.0, 6.0, -8.0, 0.0, 4.0], [1.0, 9.0, 4.0, 8.0, -5.0, 2.0, 3.0, -1.0, 7.0, -2.0],
         [2.0, -3.0, 0.0, 0.0, 0.0, -2.0, 2.0, 5.0, -9.0, 2.0], [6.0, 0.0, 8.0, 2.0, 9.0, 0.0, 1.0, 4.0, -7.0, -2.0],
         [-5.0, 0.0, -7.0, 7.0, 6.0, -3.0, 4.0, -7.0, 6.0, 0.0], [0.0, 0.0, 2.0, 4.0, 1.0, -2.0, 0.0, 8.0, -5.0, 9.0],
         [-4.0, 9.0, 4.0, -5.0, 0.0, -9.0, 6.0, -1.0, 7.0, -1.0], [5.0, 4.0, -9.0, 3.0, 5.0, -9.0, 2.0, -8.0, 8.0, -8.0],
         [-6.0, -4.0, 0.0, 9.0, -4.0, 9.0, -3.0, -6.0, 9.0, -8.0], [-3.0, 5.0, -4.0, -5.0, -2.0, 1.0, -2.0, 0.0, 9.0, 1.0],
         [-6.0, 3.0, -1.0, -9.0, 9.0, 0.0, 4.0, 6.0, 4.0, 8.0], [2.0, -8.0, 2.0, 0.0, -3.0, -3.0, 8.0, 6.0, 5.0, 8.0],
         [2.0, 6.0, -6.0, -2.0, 6.0, -7.0, 1.0, 8.0, 3.0, 7.0], [8.0, -8.0, -7.0, -6.0, -2.0, -7.0, -8.0, -1.0, 2.0, 9.0],
         [3.0, 7.0, 6.0, -8.0, -1.0, 6.0, -2.0, 7.0, -9.0, -6.0], [2.0, 8.0, 8.0, -2.0, 2.0, 9.0, -8.0, -7.0, 8.0, -7.0],
         [0.0, 5.0, -6.0, 9.0, 5.0, -2.0, -4.0, -9.0, 6.0, 0.0], [5.0, -5.0, -9.0, -6.0, 5.0, -6.0, -8.0, -4.0, -3.0, -8.0],
         [-2.0, 1.0, 4.0, 9.0, -7.0, -4.0, 0.0, -1.0, 8.0, 6.0], [-7.0, -3.0, 2.0, -8.0, -7.0, 0.0, -2.0, 1.0, 0.0, -9.0]],  # weights 1
        [[2.0, -8.0, 0.0, -5.0, -3.0, -5.0, -6.0, 0.0, -8.0, 6.0, 0.0, -4.0, -4.0, -4.0, 9.0, 6.0, 2.0, 1.0, 2.0, 3.0],
         [-2.0, 3.0, 5.0, -7.0, -5.0, 2.0, 4.0, 2.0, -3.0, -1.0, -1.0, 8.0, 7.0, -3.0, 6.0, -3.0, 0.0, 0.0, 8.0, 0.0],
         [-4.0, 9.0, -4.0, 0.0, -2.0, 0.0, 4.0, -8.0, 8.0, -8.0, 9.0, 5.0, -9.0, -8.0, 3.0, 0.0, 7.0, -6.0, -2.0, 4.0],
         [0.0, 1.0, -1.0, 7.0, -5.0, 8.0, -1.0, 9.0, 3.0, 7.0, -9.0, 1.0, -2.0, 9.0, 1.0, 0.0, -5.0, -3.0, -5.0, 3.0],
         [-4.0, 3.0, -1.0, -7.0, 5.0, 1.0, -3.0, 6.0, -7.0, 8.0, 0.0, -2.0, 6.0, -5.0, 5.0, 4.0, 1.0, -1.0, -9.0, 3.0]],  # weights 2
        [[-4.0, -9.0, -1.0, -3.0, 2.0], [8.0, 3.0, 5.0, 1.0, -4.0], [5.0, -1.0, 0.0, 8.0, -3.0]]  # weights 3
    ]
    biases = [
        [[-9.0], [0.0], [-7.0], [-7.0], [1.0], [0.0], [-8.0], [3.0], [-9.0], [-6.0], [-8.0], [6.0], [6.0], [3.0],
         [-7.0], [-7.0], [1.0], [2.0], [-9.0], [-2.0]],  # biases 1
        [[-7.0], [-5.0], [-6.0], [1.0], [-6.0]],  # biases 2
        [[0.0], [-1.0], [-7.0]]  # biases 3
    ]
    relu_list = [
        True,  # relu 1
        True,  # relu 2
        False  # relu 3
    ]
    """
    """
    # Problem 8
    layers = 4
    weights = [
        [[-3.0, -3.0, 4.0, -8.0, -2.0, 0.0, -1.0, -9.0, -9.0, 5.0, 0.0, -9.0, 7.0, -1.0, -7.0, 7.0, 9.0, 3.0, -5.0, -4.0],
         [-9.0, 5.0, -8.0, 1.0, 7.0, 3.0, 0.0, 4.0, 3.0, -9.0, -8.0, 3.0, 1.0, -5.0, 6.0, -8.0, 4.0, -2.0, -5.0, -4.0],
         [3.0, -1.0, 6.0, 0.0, 9.0, 7.0, 8.0, -7.0, 2.0, -3.0, 0.0, -6.0, -5.0, 9.0, 8.0, -4.0, 9.0, -3.0, 2.0, 7.0],
         [-9.0, 4.0, 9.0, 7.0, 0.0, 9.0, -7.0, 2.0, 4.0, -8.0, 7.0, 0.0, 0.0, 1.0, 6.0, 6.0, 8.0, -3.0, -9.0, -1.0],
         [0.0, -2.0, -1.0, 0.0, 7.0, 3.0, -4.0, -4.0, 0.0, 7.0, 0.0, -9.0, -9.0, -2.0, -3.0, 6.0, 0.0, -3.0, -3.0, 6.0],
         [0.0, 1.0, -4.0, -6.0, -3.0, 1.0, 5.0, -4.0, -1.0, 3.0, -2.0, 7.0, -8.0, 2.0, 0.0, -6.0, -4.0, 7.0, -9.0, 0.0],
         [6.0, -5.0, 8.0, -9.0, 0.0, 4.0, -3.0, -5.0, 0.0, 1.0, -4.0, 6.0, 8.0, 0.0, -8.0, 3.0, 1.0, 3.0, 5.0, -7.0],
         [8.0, 0.0, -2.0, 9.0, -2.0, 0.0, 2.0, -3.0, 3.0, 9.0, 8.0, 6.0, 2.0, 2.0, 0.0, 5.0, -2.0, 1.0, 1.0, 4.0],
         [-5.0, 0.0, 5.0, 6.0, -4.0, 3.0, 0.0, -2.0, -6.0, -1.0, 6.0, 2.0, 6.0, 0.0, -6.0, 3.0, -1.0, -2.0, 3.0, -7.0],
         [7.0, 6.0, 6.0, -5.0, -5.0, -9.0, 7.0, 2.0, -1.0, 7.0, -9.0, 4.0, 9.0, -7.0, 0.0, 0.0, -9.0, 4.0, 7.0, -2.0],
         [-1.0, -9.0, 0.0, 5.0, -5.0, -5.0, 9.0, -5.0, 3.0, 1.0, 4.0, 0.0, -9.0, -2.0, 2.0, -4.0, -6.0, -2.0, 1.0, -4.0],
         [0.0, -9.0, -9.0, 1.0, 4.0, 4.0, 4.0, 6.0, 6.0, 8.0, 4.0, -4.0, -8.0, -3.0, -6.0, -7.0, 0.0, -5.0, -8.0, 3.0],
         [-6.0, -9.0, -7.0, -2.0, 3.0, 6.0, -6.0, 6.0, 6.0, 4.0, 8.0, 0.0, 1.0, -3.0, 6.0, -9.0, -5.0, -7.0, 5.0, 3.0],
         [9.0, -4.0, -8.0, 0.0, -1.0, 0.0, 4.0, 9.0, 4.0, 2.0, -7.0, 3.0, -7.0, -4.0, -7.0, 4.0, 0.0, 7.0, 3.0, 7.0],
         [-8.0, -1.0, 3.0, 0.0, -1.0, -2.0, -4.0, 0.0, 5.0, 1.0, 5.0, -7.0, 7.0, -7.0, -3.0, -3.0, 0.0, -4.0, 6.0, -9.0],
         [2.0, 6.0, -5.0, 2.0, 8.0, 6.0, -8.0, -6.0, 5.0, -6.0, 7.0, 4.0, 3.0, 2.0, -3.0, -1.0, 3.0, 4.0, -8.0, 7.0],
         [2.0, -8.0, -8.0, 0.0, -2.0, -3.0, 6.0, 9.0, 7.0, -1.0, 9.0, -4.0, -7.0, -9.0, 2.0, 2.0, 6.0, 1.0, 3.0, 5.0],
         [3.0, -1.0, -8.0, 1.0, -2.0, 8.0, -7.0, 7.0, 4.0, 3.0, -5.0, 8.0, 3.0, -7.0, -4.0, 9.0, 1.0, 0.0, -1.0, 7.0],
         [2.0, -3.0, -1.0, -9.0, 2.0, 0.0, 4.0, 3.0, 7.0, 8.0, -6.0, 0.0, 3.0, 4.0, 3.0, -4.0, 0.0, 3.0, -4.0, 7.0],
         [-4.0, -9.0, 8.0, 6.0, 2.0, 1.0, -7.0, -3.0, -4.0, 6.0, -6.0, 7.0, 0.0, -2.0, -1.0, 7.0, -2.0, 4.0, -3.0, -2.0]],  # weights 1
        [[3.0, 0.0, 5.0, -2.0, -1.0, 6.0, 0.0, -8.0, 5.0, 4.0, 1.0, -7.0, 8.0, -8.0, -8.0, -6.0, -4.0, 3.0, 0.0, 0.0],
         [-2.0, -3.0, -8.0, 1.0, 5.0, 0.0, -8.0, 1.0, -2.0, -1.0, 5.0, -2.0, -5.0, -6.0, -8.0, 2.0, 5.0, -6.0, 0.0, -4.0],
         [-6.0, 4.0, -1.0, -9.0, 6.0, 0.0, -9.0, 0.0, -7.0, 5.0, -2.0, -7.0, 9.0, -6.0, 0.0, -8.0, -5.0, -7.0, -5.0, -6.0],
         [-7.0, 1.0, 7.0, -9.0, 1.0, 6.0, 1.0, 7.0, 9.0, -6.0, 7.0, 2.0, 3.0, -8.0, 9.0, 1.0, 8.0, 2.0, 9.0, -2.0],
         [0.0, -3.0, -7.0, 9.0, -4.0, 0.0, 7.0, 6.0, -7.0, -3.0, 0.0, -2.0, 0.0, 9.0, 9.0, -6.0, -7.0, 4.0, -8.0, 7.0],
         [-9.0, -4.0, -8.0, -9.0, -3.0, 9.0, 7.0, 7.0, 0.0, 7.0, 7.0, -5.0, -7.0, -8.0, -8.0, 0.0, -4.0, 5.0, 7.0, 0.0],
         [0.0, -6.0, 2.0, 4.0, -9.0, -7.0, 0.0, 0.0, -4.0, 5.0, 7.0, 8.0, 5.0, 5.0, 3.0, -7.0, -9.0, 6.0, 8.0, 0.0],
         [8.0, -9.0, 8.0, 9.0, -2.0, 0.0, 3.0, 4.0, -7.0, -9.0, -8.0, -3.0, -8.0, 3.0, -5.0, 6.0, -8.0, 5.0, 0.0, 1.0],
         [-2.0, 9.0, -6.0, -5.0, -5.0, -2.0, 6.0, 8.0, -2.0, 5.0, 6.0, 6.0, -6.0, -8.0, -7.0, -6.0, -1.0, 7.0, -3.0, -6.0],
         [7.0, 8.0, -4.0, 4.0, 2.0, -2.0, 0.0, 5.0, 0.0, 9.0, 8.0, -9.0, 5.0, -7.0, 4.0, -3.0, -3.0, -4.0, 3.0, 3.0],
         [-7.0, 8.0, 5.0, 1.0, 9.0, -2.0, 7.0, 2.0, -1.0, 3.0, 6.0, 1.0, -6.0, 2.0, 6.0, -5.0, -3.0, -7.0, -6.0, 5.0],
         [8.0, 2.0, 4.0, 7.0, -8.0, 4.0, 7.0, 0.0, 0.0, -8.0, 4.0, -6.0, 5.0, -2.0, 0.0, -2.0, 7.0, 9.0, 9.0, -5.0],
         [5.0, 4.0, 0.0, -7.0, 5.0, -8.0, 1.0, 1.0, 6.0, 9.0, -1.0, 6.0, 4.0, 0.0, 6.0, -8.0, -2.0, 1.0, -7.0, 3.0],
         [0.0, 7.0, -3.0, -8.0, -8.0, -2.0, -6.0, -7.0, -3.0, -7.0, -4.0, 3.0, 0.0, -9.0, -7.0, 6.0, -5.0, 0.0, 7.0, -3.0],
         [0.0, -4.0, -6.0, 2.0, -4.0, 2.0, 5.0, -4.0, -4.0, 2.0, -2.0, 2.0, -1.0, -6.0, -7.0, -8.0, 5.0, 8.0, -1.0, -4.0],
         [6.0, 5.0, -6.0, -7.0, 0.0, -2.0, -2.0, -2.0, 8.0, 0.0, 3.0, 3.0, 6.0, -2.0, 6.0, -6.0, 2.0, 8.0, 7.0, 4.0],
         [4.0, -6.0, -9.0, 1.0, 9.0, -6.0, 0.0, 7.0, -5.0, 4.0, 2.0, 2.0, -4.0, 0.0, 2.0, 4.0, -4.0, -9.0, -3.0, 9.0],
         [1.0, -3.0, -1.0, 3.0, 5.0, -2.0, -7.0, 2.0, -7.0, 2.0, 2.0, 0.0, -8.0, 3.0, 0.0, -7.0, -5.0, 5.0, 0.0, 6.0],
         [-9.0, 0.0, 6.0, -2.0, 2.0, 4.0, 7.0, -2.0, 6.0, -7.0, 0.0, 1.0, -5.0, -9.0, 4.0, 1.0, 2.0, 7.0, 3.0, 1.0],
         [-9.0, 8.0, -1.0, 8.0, 4.0, 3.0, -4.0, 0.0, 0.0, 9.0, 5.0, 6.0, 1.0, 5.0, 1.0, 1.0, 7.0, 0.0, 5.0, -8.0]],  # weights 2
        [[-2.0, 9.0, -9.0, 1.0, -3.0, 4.0, -9.0, 0.0, 8.0, -7.0, 7.0, 1.0, 4.0, 3.0, -6.0, 1.0, 1.0, 6.0, -3.0, -5.0],
         [-7.0, 5.0, 8.0, 8.0, 0.0, -6.0, 7.0, -8.0, 7.0, 9.0, -4.0, 7.0, 6.0, 2.0, 8.0, 6.0, 3.0, 4.0, 0.0, -9.0],
         [0.0, 5.0, -9.0, 3.0, -5.0, -6.0, -9.0, -7.0, -9.0, -9.0, -5.0, 6.0, 3.0, 6.0, -8.0, 1.0, -6.0, 7.0, 5.0, -2.0],
         [3.0, 4.0, 1.0, -9.0, -3.0, 3.0, -4.0, 4.0, 0.0, -6.0, -2.0, 4.0, -7.0, 5.0, 5.0, 5.0, 9.0, -4.0, 5.0, 0.0],
         [-3.0, -1.0, 1.0, -3.0, -5.0, -8.0, 3.0, 1.0, -3.0, 8.0, 5.0, 2.0, 4.0, -8.0, 1.0, -5.0, -4.0, -3.0, 0.0, 0.0],
         [2.0, -2.0, 1.0, -3.0, 6.0, -7.0, 0.0, -6.0, 8.0, -4.0, 4.0, 8.0, -7.0, -3.0, 4.0, 4.0, -4.0, 6.0, -7.0, 0.0],
         [-1.0, 3.0, -1.0, 6.0, -6.0, 6.0, 2.0, 1.0, 3.0, 0.0, 5.0, 1.0, 0.0, -3.0, 1.0, -8.0, 2.0, 8.0, 5.0, -3.0],
         [-8.0, 5.0, 9.0, 4.0, 4.0, 0.0, -1.0, 0.0, 7.0, -6.0, -8.0, -1.0, -5.0, 0.0, 9.0, 0.0, 4.0, -6.0, 8.0, 3.0],
         [-2.0, 6.0, -6.0, 6.0, 0.0, 0.0, -6.0, 0.0, -3.0, -7.0, -7.0, -4.0, 0.0, 0.0, 0.0, -3.0, 7.0, -1.0, -9.0, 5.0],
         [-1.0, 1.0, -3.0, -1.0, 4.0, -6.0, -7.0, 8.0, -3.0, 0.0, 0.0, 5.0, -4.0, 0.0, -5.0, -6.0, -5.0, 8.0, 3.0, -6.0],
         [-9.0, 1.0, 1.0, 5.0, -7.0, -1.0, -3.0, 1.0, -7.0, 6.0, 0.0, 0.0, 7.0, 1.0, -9.0, 5.0, -3.0, 7.0, -8.0, 8.0],
         [-3.0, -6.0, -2.0, 4.0, 5.0, 0.0, -1.0, -8.0, 5.0, 7.0, -7.0, 1.0, -5.0, 8.0, 1.0, -1.0, -4.0, 8.0, -3.0, 3.0],
         [3.0, -5.0, 4.0, -3.0, 1.0, 3.0, 9.0, -8.0, -9.0, 5.0, -4.0, -8.0, 0.0, -4.0, -3.0, -4.0, -5.0, -8.0, -9.0, -5.0],
         [1.0, 9.0, -7.0, -4.0, 6.0, -9.0, -5.0, -8.0, -4.0, 1.0, -4.0, 6.0, 2.0, 9.0, 4.0, -7.0, -2.0, -3.0, 1.0, 7.0],
         [-1.0, -6.0, -7.0, -3.0, -5.0, 9.0, 8.0, -6.0, 0.0, -1.0, -2.0, 9.0, -1.0, -5.0, 2.0, -6.0, 3.0, -3.0, -2.0, 1.0],
         [1.0, -6.0, -1.0, 3.0, -6.0, 4.0, -8.0, -2.0, -6.0, 4.0, -8.0, -6.0, 9.0, -1.0, 0.0, 0.0, 6.0, -6.0, -1.0, -5.0],
         [9.0, 0.0, 1.0, 2.0, -8.0, 7.0, -7.0, 3.0, -6.0, -1.0, 9.0, -6.0, 6.0, 5.0, -3.0, 3.0, 6.0, 4.0, 5.0, -3.0],
         [-8.0, -1.0, -7.0, -2.0, 9.0, 9.0, 0.0, -8.0, 4.0, 4.0, 6.0, 1.0, -5.0, 7.0, 0.0, -1.0, 2.0, -3.0, -5.0, -1.0],
         [-1.0, -8.0, 1.0, -3.0, 6.0, 1.0, -5.0, 6.0, 0.0, -6.0, -1.0, 0.0, 3.0, -8.0, -1.0, 5.0, 8.0, 1.0, 2.0, 1.0],
         [6.0, 3.0, 0.0, 7.0, -6.0, 0.0, -5.0, 7.0, 1.0, 6.0, -5.0, 8.0, -9.0, 8.0, -3.0, 4.0, -3.0, 9.0, -3.0, 6.0]],  # weights 3
        [[-2.0, 5.0, 8.0, -5.0, -8.0, 4.0, 0.0, -3.0, -5.0, -2.0, 1.0, -3.0, -2.0, 2.0, 5.0, 6.0, -9.0, -5.0, 8.0, 0.0],
         [-4.0, 5.0, 6.0, 2.0, -3.0, 5.0, -1.0, 4.0, -5.0, 6.0, 0.0, 8.0, -9.0, -3.0, -3.0, 9.0, -1.0, 4.0, 0.0, 9.0],
         [-5.0, -6.0, -5.0, -4.0, 0.0, 7.0, 9.0, 7.0, 5.0, 0.0, 3.0, 6.0, -7.0, 2.0, -5.0, 2.0, -3.0, 0.0, -5.0, -4.0],
         [4.0, 0.0, -1.0, -4.0, 8.0, 0.0, 4.0, 0.0, 5.0, -8.0, -1.0, 3.0, 7.0, 4.0, -3.0, -7.0, 5.0, 5.0, -2.0, -3.0]]  # Weights 4
    ]
    biases = [
        [[8.0], [-5.0], [-6.0], [-8.0], [-9.0], [8.0], [2.0], [-7.0], [0.0], [-8.0], [-3.0],
         [0.0], [-7.0], [-9.0], [4.0], [-6.0], [-9.0], [3.0], [-8.0], [1.0]],  # biases 1
        [[-1.0], [3.0], [-3.0], [2.0], [-8.0], [1.0], [4.0], [-5.0], [-6.0], [5.0], [3.0],
         [4.0], [8.0], [7.0], [9.0], [8.0], [1.0], [1.0], [-7.0], [-7.0]],  # biases 2
        [[-4.0], [9.0], [-1.0], [9.0], [-3.0], [-2.0], [-4.0], [-4.0], [-2.0], [3.0], [-5.0],
         [-2.0], [8.0], [3.0], [-8.0], [0.0], [-7.0], [8.0], [0.0], [6.0]],  # biases 3
        [[-4.0], [2.0], [9.0], [1.0]]  # Biases 4
    ]
    relu_list = [
        True,  # relu 1
        True,  # relu 2
        True,  # relu 3
        False  # relu 4
    ]
    """
    """
    # Problem 9
    layers = 5
    weights = [
        [[8.0, 2.0, 4.0, -1.0, -8.0, -3.0, 8.0, 6.0, -3.0, -4.0, 8.0, -2.0, 2.0, 8.0, -4.0, 0.0, -3.0, 4.0, 9.0, 1.0],
         [0.0, -5.0, 6.0, 3.0, -6.0, -6.0, 0.0, 8.0, -2.0, -9.0, 6.0, -7.0, -6.0, 2.0, 9.0, -4.0, 0.0, -1.0, 0.0, -6.0],
         [-6.0, -8.0, 3.0, 5.0, -2.0, 9.0, 6.0, 8.0, -7.0, 0.0, -9.0, 7.0, -8.0, 0.0, -2.0, 9.0, -4.0, 3.0, 3.0, 7.0],
         [7.0, 1.0, 0.0, -8.0, -6.0, -9.0, -7.0, 1.0, 1.0, 3.0, -6.0, 7.0, 7.0, 0.0, -2.0, -3.0, 5.0, 8.0, -1.0, 2.0],
         [8.0, 0.0, -2.0, -4.0, 1.0, 0.0, 8.0, 9.0, -7.0, 5.0, -9.0, -1.0, -9.0, 1.0, -2.0, 2.0, 7.0, 7.0, 9.0, -5.0],
         [7.0, 2.0, 4.0, 0.0, 5.0, -5.0, 4.0, 0.0, -5.0, -6.0, 3.0, 4.0, 1.0, 6.0, 6.0, 8.0, -6.0, -5.0, -9.0, -8.0],
         [9.0, 7.0, -5.0, -7.0, -9.0, 6.0, -4.0, 0.0, -4.0, 3.0, -2.0, 3.0, 0.0, -4.0, -3.0, -1.0, -5.0, 7.0, 3.0, 3.0],
         [-3.0, 9.0, 7.0, 0.0, 7.0, 4.0, -8.0, -3.0, -5.0, 0.0, -8.0, -1.0, 5.0, 6.0, 3.0, 9.0, -8.0, -3.0, 3.0, 9.0],
         [-1.0, 7.0, 4.0, -8.0, -7.0, -3.0, 4.0, 8.0, 0.0, -7.0, -4.0, -9.0, 7.0, -9.0, -2.0, -6.0, 4.0, 5.0, 2.0, 7.0],
         [4.0, 1.0, 1.0, 2.0, -1.0, 9.0, 2.0, -8.0, -7.0, 3.0, -4.0, -6.0, -7.0, 6.0, 6.0, 6.0, -5.0, 9.0, 1.0, -5.0]],  # weights 1
        [[-6.0, 3.0, 5.0, -4.0, -7.0, 0.0, -5.0, -1.0, -4.0, 2.0], [-5.0, -8.0, 0.0, 5.0, -8.0, 1.0, 0.0, 2.0, 8.0, -6.0],
         [0.0, -2.0, 8.0, 0.0, -6.0, -2.0, 6.0, 6.0, -9.0, -6.0], [0.0, -1.0, -4.0, 7.0, -4.0, 3.0, -1.0, -6.0, 5.0, 2.0],
         [-8.0, 4.0, 4.0, -5.0, -9.0, -6.0, 0.0, -3.0, 9.0, 4.0], [7.0, 3.0, -1.0, -2.0, 3.0, -2.0, -9.0, 8.0, -9.0, 0.0],
         [7.0, -9.0, -4.0, 3.0, 3.0, -7.0, 7.0, -2.0, -5.0, 9.0], [0.0, -8.0, 3.0, -5.0, -3.0, -4.0, 6.0, 7.0, 8.0, -5.0],
         [1.0, 6.0, 5.0, -7.0, 0.0, 0.0, -5.0, 2.0, 4.0, -8.0], [9.0, -1.0, -2.0, 2.0, 2.0, 4.0, -2.0, -1.0, 8.0, 1.0]],  # weights 2
        [[0.0, 8.0, -6.0, 4.0, 0.0, 8.0, -3.0, 2.0, 9.0, -7.0], [-4.0, -8.0, 9.0, -9.0, -1.0, 0.0, 5.0, 0.0, 7.0, 4.0],
         [0.0, -2.0, 6.0, 1.0, 5.0, 4.0, 2.0, -5.0, -8.0, 9.0], [8.0, -4.0, -7.0, 7.0, -3.0, -9.0, 7.0, 3.0, -2.0, -9.0],
         [1.0, 8.0, -8.0, -4.0, 9.0, -3.0, -2.0, 5.0, 0.0, 9.0], [7.0, 5.0, 6.0, 3.0, -7.0, -1.0, -9.0, 0.0, 7.0, 6.0],
         [-2.0, 6.0, -4.0, 1.0, -6.0, -7.0, 7.0, 4.0, 8.0, -9.0], [-3.0, 6.0, -5.0, 0.0, 0.0, 0.0, -4.0, 1.0, -6.0, 9.0],
         [1.0, -2.0, -1.0, -4.0, 3.0, 1.0, 0.0, -6.0, -8.0, 5.0], [-5.0, -1.0, -2.0, 6.0, 7.0, 8.0, -2.0, -6.0, -2.0, -7.0]],  # weights 3
        [[3.0, 2.0, -4.0, -1.0, -5.0, 2.0, 5.0, -2.0, -5.0, 1.0], [-2.0, 0.0, -1.0, -8.0, 2.0, 0.0, 0.0, -2.0, 6.0, 8.0],
         [4.0, 0.0, 8.0, -8.0, 5.0, 6.0, -5.0, -6.0, 1.0, -2.0], [-3.0, -7.0, -4.0, -9.0, -5.0, -2.0, -3.0, -2.0, 7.0, 2.0],
         [-2.0, -5.0, -4.0, 7.0, -5.0, -3.0, 1.0, -2.0, -8.0, 9.0], [-5.0, -4.0, -8.0, 5.0, 5.0, 0.0, -9.0, 9.0, 4.0, 0.0],
         [5.0, 9.0, -9.0, 6.0, 8.0, 5.0, 0.0, 6.0, 0.0, -6.0], [-7.0, 8.0, -2.0, -3.0, 0.0, -1.0, -3.0, 4.0, 3.0, 7.0],
         [-3.0, 6.0, 9.0, 9.0, 0.0, -1.0, -7.0, 8.0, 4.0, 3.0], [-8.0, 0.0, 9.0, 4.0, 9.0, 6.0, 9.0, 8.0, -5.0, -3.0]],  # Weights 4
        [[0.0, -9.0, -4.0, 9.0, -1.0, -7.0, -5.0, -6.0, -4.0, -6.0],
         [-2.0, 7.0, -9.0, 2.0, 5.0, -1.0, 8.0, 7.0, 0.0, -3.0], [1.0, -4.0, -7.0, -3.0, 6.0, 8.0, 4.0, 5.0, 1.0, -5.0]]  # Weights 5

    ]
    biases = [
        [[-4.0], [6.0], [2.0], [-5.0], [0.0], [-3.0], [-7.0], [6.0], [9.0], [2.0]],  # biases 1
        [[7.0], [-8.0], [0.0], [6.0], [-3.0], [5.0], [4.0], [1.0], [-9.0], [4.0]],  # biases 2
        [[0.0], [5.0], [0.0], [-1.0], [4.0], [3.0], [0.0], [-5.0], [2.0], [3.0]],  # biases 3
        [[0.0], [-2.0], [0.0], [8.0], [-4.0], [-1.0], [0.0], [-3.0], [-3.0], [-5.0]],  # biases 4
        [[7.0], [-1.0], [5.0]]  # biases 5
    ]
    relu_list = [
        True,  # relu 1
        True,  # relu 2
        True,  # relu 3
        True,  # relu 4
        False  # relu 5
    ]
    """
    """
    # Problem 10
    layers = 4
    weights = [
        [[-4.0, -3.0, 5.0, 0.0, -9.0, 8.0, -9.0, -1.0, 0.0, 6.0, -9.0, -4.0, -2.0, -5.0, 5.0, 7.0, 0.0, 6.0, 2.0, -4.0,
          -7.0, 3.0, 3.0, -7.0, -8.0, -8.0, 2.0, -7.0, -2.0, -5.0],
         [5.0, -2.0, -1.0, 0.0, 6.0, 5.0, -3.0, 4.0, 1.0, -2.0, -2.0, -8.0, -6.0, -4.0, 3.0, 4.0, -2.0, -6.0, -9.0,
          -7.0, -8.0, -2.0, -3.0, 9.0, 0.0, -1.0, -3.0, -7.0, -1.0, -8.0],
         [8.0, -4.0, -8.0, 9.0, -9.0, 2.0, -7.0, 9.0, -9.0, -3.0, 8.0, -8.0, -9.0, 0.0, 6.0, 9.0, -3.0, 2.0, -5.0, 1.0,
          2.0, 0.0, -7.0, -1.0, -4.0, -4.0, -1.0, -8.0, -6.0, -4.0],
         [5.0, 5.0, 1.0, 7.0, -7.0, -1.0, -3.0, -2.0, 0.0, -5.0, 5.0, 8.0, 4.0, -8.0, -2.0, 9.0, 0.0, 2.0, 4.0, 0.0,
          2.0, 0.0, 1.0, 9.0, 1.0, -2.0, 3.0, 7.0, -4.0, 7.0],
         [0.0, 9.0, -1.0, 2.0, 6.0, -3.0, -5.0, -4.0, -3.0, 0.0, -8.0, 3.0, 0.0, 8.0, 8.0, -9.0, -5.0, 2.0, -5.0, 9.0,
          -9.0, -2.0, 0.0, -3.0, 5.0, -3.0, 0.0, 3.0, 4.0, 5.0],
         [2.0, -8.0, -1.0, 5.0, 8.0, -4.0, 3.0, -8.0, 9.0, -2.0, 0.0, 0.0, 7.0, -2.0, -7.0, 9.0, -9.0, -5.0, 5.0, 8.0,
          8.0, 5.0, 0.0, 2.0, 1.0, 6.0, 7.0, 8.0, 5.0, 0.0],
         [0.0, 1.0, -1.0, 2.0, 6.0, 0.0, 3.0, 0.0, 4.0, 8.0, -6.0, -8.0, 2.0, 4.0, 6.0, 2.0, 0.0, 6.0, -6.0, -3.0, -1.0,
          9.0, -3.0, 7.0, -7.0, 7.0, -6.0, 9.0, -4.0, -7.0],
         [-4.0, -6.0, 6.0, -4.0, 0.0, 8.0, 2.0, -7.0, -9.0, -1.0, -7.0, 3.0, 6.0, 0.0, 7.0, 5.0, 5.0, -2.0, 5.0, 0.0,
          7.0, 2.0, -1.0, -8.0, 1.0, -2.0, 8.0, -9.0, 9.0, 9.0],
         [-8.0, -3.0, 9.0, -4.0, -4.0, -7.0, 0.0, 8.0, -4.0, 0.0, -5.0, -8.0, 0.0, -8.0, 3.0, 9.0, 5.0, 0.0, -2.0, 2.0,
          -7.0, -8.0, -6.0, 7.0, -3.0, -4.0, 0.0, 7.0, -9.0, 0.0],
         [2.0, 8.0, 2.0, -4.0, 1.0, -5.0, -5.0, -7.0, 1.0, 3.0, 6.0, -5.0, 0.0, -9.0, 9.0, 8.0, -1.0, 9.0, 2.0, -8.0,
          -3.0, -6.0, 7.0, -3.0, 0.0, 3.0, -9.0, -8.0, -2.0, -1.0],
         [0.0, 8.0, 0.0, 5.0, -4.0, 1.0, 0.0, 8.0, 6.0, 8.0, 3.0, -8.0, 1.0, 0.0, 3.0, -7.0, 0.0, -3.0, -7.0, 6.0, 5.0,
          1.0, 9.0, 5.0, 3.0, -9.0, -5.0, 5.0, 8.0, 4.0],
         [5.0, 0.0, -7.0, 3.0, 8.0, -8.0, 8.0, -3.0, 3.0, -9.0, 1.0, -1.0, 7.0, -4.0, -5.0, 0.0, 7.0, 4.0, 9.0, 0.0,
          0.0, 4.0, -8.0, 9.0, 9.0, 1.0, 3.0, 8.0, 0.0, 5.0],
         [-1.0, -9.0, 2.0, -8.0, -6.0, -9.0, 0.0, -5.0, -3.0, 8.0, -2.0, 7.0, -2.0, -9.0, 2.0, -2.0, -1.0, -4.0, -1.0,
          7.0, -2.0, -7.0, 9.0, -3.0, 2.0, 8.0, 9.0, 5.0, -3.0, -5.0],
         [8.0, 2.0, -3.0, 8.0, -5.0, 3.0, 0.0, 3.0, -1.0, 7.0, -3.0, 2.0, 2.0, -6.0, 8.0, 0.0, 2.0, -4.0, 8.0, 7.0,
          -9.0, 7.0, -4.0, -8.0, -5.0, 8.0, 0.0, 3.0, 9.0, -9.0],
         [-8.0, -5.0, 9.0, 1.0, -5.0, 8.0, 1.0, -7.0, 3.0, 0.0, 3.0, 0.0, 9.0, -6.0, -3.0, 7.0, 4.0, -5.0, 4.0, 0.0,
          -5.0, -9.0, 0.0, 5.0, -3.0, -6.0, -7.0, -9.0, 3.0, -8.0],
         [0.0, 1.0, -6.0, -1.0, 3.0, -8.0, -7.0, 7.0, 8.0, -4.0, 1.0, -2.0, 3.0, 1.0, 5.0, -6.0, 0.0, 8.0, 0.0, 2.0,
          1.0, 4.0, 3.0, -1.0, -9.0, 1.0, 0.0, -7.0, 9.0, 2.0],
         [5.0, 1.0, 4.0, -4.0, 6.0, 5.0, -9.0, -8.0, 1.0, 3.0, -2.0, -5.0, -4.0, 7.0, 2.0, 4.0, -3.0, -7.0, 6.0, 2.0,
          6.0, 0.0, -2.0, -6.0, -9.0, 6.0, 0.0, -8.0, 5.0, 6.0],
         [3.0, 4.0, 4.0, 0.0, 9.0, -1.0, 6.0, 5.0, 9.0, -9.0, 2.0, 0.0, 2.0, 1.0, 1.0, 8.0, 8.0, 9.0, -9.0, -4.0, 1.0,
          -4.0, -3.0, 0.0, 7.0, -3.0, 4.0, 0.0, 0.0, -3.0],
         [4.0, 9.0, 6.0, 4.0, 1.0, 3.0, 6.0, 1.0, 2.0, -3.0, -5.0, 0.0, -1.0, 5.0, 9.0, 4.0, 6.0, 0.0, 6.0, -9.0, -6.0,
          0.0, 1.0, 5.0, 1.0, 7.0, 8.0, 7.0, 0.0, -3.0],
         [2.0, -8.0, -5.0, 3.0, 6.0, 6.0, -7.0, -4.0, 0.0, 8.0, -4.0, 0.0, -2.0, 0.0, 7.0, 7.0, -2.0, -9.0, 2.0, 0.0,
          -1.0, 6.0, -9.0, 3.0, 6.0, 1.0, 9.0, -7.0, 0.0, -7.0],
         [-1.0, 0.0, 0.0, 0.0, -8.0, 2.0, 7.0, 4.0, -2.0, 0.0, -7.0, 6.0, -2.0, -7.0, 1.0, 1.0, 1.0, 1.0, 6.0, 4.0, 0.0,
          -9.0, 0.0, -4.0, -2.0, -9.0, -8.0, -7.0, 1.0, -8.0],
         [-2.0, 9.0, 2.0, -9.0, -2.0, -5.0, 9.0, -5.0, -7.0, -9.0, -3.0, -6.0, -1.0, 5.0, -8.0, 0.0, -6.0, -6.0, -6.0,
          2.0, 3.0, 1.0, -3.0, 0.0, -4.0, -3.0, 8.0, -1.0, 6.0, -5.0],
         [4.0, 1.0, -3.0, -9.0, -1.0, -6.0, -1.0, -2.0, -5.0, 8.0, 0.0, 2.0, 0.0, 8.0, 8.0, 0.0, -5.0, -3.0, 3.0, -9.0,
          1.0, 9.0, -5.0, -5.0, -1.0, -7.0, 0.0, 0.0, -2.0, 9.0],
         [1.0, 4.0, 6.0, 8.0, 0.0, -5.0, 9.0, 0.0, 9.0, 7.0, 6.0, -4.0, 7.0, 0.0, -4.0, 3.0, 0.0, -8.0, -5.0, -1.0,
          -7.0, -9.0, 8.0, 0.0, 1.0, 6.0, 4.0, -3.0, 0.0, -4.0],
         [0.0, -9.0, 1.0, 5.0, -8.0, 6.0, 6.0, 6.0, 0.0, 1.0, 3.0, -5.0, -1.0, 1.0, 7.0, -8.0, 0.0, 9.0, 7.0, -8.0,
          -4.0, 0.0, 4.0, 1.0, -3.0, 6.0, 0.0, 1.0, 2.0, 3.0],
         [-5.0, -9.0, -8.0, 0.0, -2.0, 7.0, 5.0, 8.0, 0.0, -9.0, 8.0, 3.0, 0.0, 7.0, -4.0, -6.0, 8.0, 9.0, 8.0, 0.0,
          -6.0, 0.0, -1.0, -7.0, -5.0, -7.0, -2.0, -8.0, -4.0, 7.0],
         [0.0, -1.0, -4.0, -1.0, 1.0, 0.0, -8.0, -6.0, -7.0, 9.0, -7.0, 0.0, 8.0, -2.0, 5.0, 4.0, 1.0, 6.0, 8.0, 0.0,
          0.0, 4.0, 0.0, -4.0, 4.0, 1.0, 4.0, 1.0, -3.0, -6.0],
         [0.0, -5.0, -3.0, -9.0, -1.0, 0.0, -7.0, 8.0, 7.0, 3.0, 0.0, 4.0, 2.0, 3.0, 3.0, 9.0, -9.0, 4.0, 0.0, 0.0, 0.0,
          -1.0, 2.0, -3.0, 1.0, 4.0, -5.0, 4.0, -5.0, -9.0],
         [-9.0, -7.0, 6.0, 7.0, 9.0, 5.0, -2.0, 2.0, 4.0, 9.0, 1.0, -8.0, 7.0, -3.0, -8.0, -1.0, -6.0, -6.0, 3.0, 5.0,
          4.0, 9.0, -4.0, -3.0, -9.0, 6.0, -1.0, -2.0, 0.0, -6.0],
         [4.0, 4.0, 5.0, -2.0, 9.0, 6.0, -3.0, 0.0, 0.0, -2.0, 9.0, -1.0, 3.0, 0.0, -5.0, -5.0, 5.0, -9.0, 3.0, -6.0,
          8.0, 8.0, -2.0, 0.0, -2.0, 1.0, -5.0, 0.0, 9.0, -3.0]],  # weights 1
        [[7.0, -9.0, -8.0, 4.0, -1.0, -7.0, 1.0, 0.0, -5.0, -3.0, 5.0, -6.0, -1.0, 3.0, 7.0, 4.0, -8.0, -8.0, -5.0, 4.0,
          -7.0, -5.0, -6.0, 4.0, 4.0, -4.0, 3.0, -6.0, 3.0, -8.0],
         [-3.0, 5.0, -8.0, 7.0, 6.0, 6.0, 8.0, -1.0, -3.0, 5.0, -3.0, 5.0, -8.0, 8.0, 7.0, 7.0, -2.0, 5.0, 1.0, 5.0,
          6.0, -5.0, -7.0, 1.0, 4.0, -2.0, 9.0, -2.0, -7.0, 5.0],
         [0.0, 3.0, 2.0, 2.0, 7.0, 0.0, 6.0, -4.0, -6.0, 3.0, 2.0, -4.0, 2.0, 0.0, -4.0, -8.0, -8.0, 6.0, -3.0, 2.0,
          2.0, -3.0, 1.0, -3.0, -4.0, -9.0, -4.0, -5.0, 9.0, 9.0],
         [3.0, -1.0, -7.0, 4.0, 2.0, -9.0, 3.0, 8.0, 3.0, 6.0, 4.0, -1.0, -6.0, -1.0, -9.0, -2.0, 1.0, 9.0, -4.0, -9.0,
          -8.0, 8.0, 5.0, 2.0, -2.0, 1.0, 7.0, -4.0, 4.0, 8.0],
         [1.0, 4.0, -4.0, -4.0, 2.0, 2.0, -7.0, -3.0, 2.0, 0.0, 9.0, -2.0, 9.0, -2.0, 0.0, 3.0, -4.0, 2.0, 8.0, -1.0,
          -1.0, 6.0, 3.0, 8.0, -6.0, -8.0, 4.0, 7.0, -8.0, 5.0],
         [9.0, -4.0, 0.0, 0.0, 9.0, 3.0, -3.0, 7.0, 1.0, 1.0, 5.0, 7.0, -1.0, 5.0, 7.0, -2.0, 1.0, -1.0, -4.0, 5.0, 9.0,
          0.0, 5.0, 8.0, -3.0, -2.0, -3.0, 6.0, 8.0, -8.0],
         [7.0, -8.0, -3.0, 0.0, 3.0, -2.0, 6.0, 2.0, 2.0, 4.0, 2.0, 5.0, -9.0, 3.0, 0.0, -7.0, 4.0, -3.0, -7.0, 2.0,
          9.0, 1.0, 5.0, -9.0, -2.0, 5.0, 8.0, -2.0, 3.0, 0.0],
         [3.0, 3.0, -2.0, -1.0, 4.0, 0.0, 6.0, 8.0, 0.0, -8.0, 3.0, -5.0, -4.0, 5.0, 7.0, 5.0, 4.0, -4.0, 0.0, -1.0,
          4.0, 8.0, 0.0, 9.0, -8.0, 5.0, -9.0, 9.0, -1.0, -5.0],
         [-9.0, 8.0, -3.0, -1.0, -8.0, 9.0, 0.0, -4.0, 2.0, 1.0, -2.0, 9.0, 6.0, 9.0, -8.0, 0.0, 1.0, -9.0, -9.0, 4.0,
          -7.0, 0.0, -7.0, -9.0, -7.0, 9.0, 5.0, -5.0, -1.0, 2.0],
         [9.0, -3.0, -5.0, -8.0, -9.0, 3.0, -3.0, 8.0, 5.0, 7.0, 2.0, -1.0, 4.0, -8.0, -6.0, 9.0, 6.0, -5.0, -7.0, 7.0,
          -5.0, 8.0, 9.0, -2.0, 0.0, -9.0, 4.0, -3.0, 8.0, -9.0],
         [0.0, 2.0, -6.0, 3.0, 1.0, 4.0, -9.0, 8.0, 9.0, 4.0, 4.0, -2.0, -1.0, 8.0, -1.0, -2.0, -7.0, -2.0, 9.0, 3.0,
          0.0, -9.0, 6.0, 8.0, -5.0, -2.0, 9.0, 7.0, -5.0, 2.0],
         [2.0, -9.0, -9.0, 5.0, 7.0, -6.0, 9.0, 2.0, 5.0, -5.0, 4.0, 6.0, -2.0, -7.0, -9.0, -7.0, -2.0, -2.0, 6.0, 4.0,
          1.0, -1.0, -2.0, 1.0, 6.0, 0.0, 7.0, -4.0, -2.0, -2.0],
         [-6.0, 3.0, 6.0, -2.0, -6.0, -8.0, -4.0, 5.0, 5.0, 0.0, 9.0, -1.0, -2.0, 6.0, 5.0, 0.0, 2.0, 7.0, -1.0, -5.0,
          3.0, 0.0, -9.0, -6.0, 6.0, -5.0, 7.0, -5.0, 7.0, -8.0],
         [-1.0, 8.0, 0.0, -1.0, 8.0, -5.0, 5.0, 2.0, 0.0, -3.0, 3.0, 9.0, 3.0, 0.0, 6.0, 9.0, 4.0, 4.0, 2.0, -5.0, -8.0,
          -8.0, 4.0, -3.0, 8.0, -4.0, 9.0, 0.0, 4.0, 0.0],
         [0.0, 8.0, 5.0, 4.0, 6.0, 1.0, 7.0, 5.0, 1.0, 5.0, -4.0, 0.0, -9.0, -3.0, -7.0, 6.0, -7.0, -7.0, -6.0, 3.0,
          2.0, -4.0, -3.0, 9.0, -8.0, 5.0, 4.0, 8.0, 1.0, -7.0],
         [0.0, 2.0, 3.0, 0.0, 6.0, -9.0, 8.0, -6.0, 4.0, -8.0, -3.0, 8.0, -1.0, -5.0, -2.0, -5.0, 5.0, -1.0, -8.0, 7.0,
          2.0, 3.0, 8.0, -9.0, -2.0, 5.0, -3.0, -1.0, -5.0, -9.0],
         [9.0, -5.0, -2.0, -9.0, 6.0, 9.0, -2.0, 3.0, 2.0, -8.0, -3.0, 8.0, 7.0, 4.0, -5.0, -9.0, -5.0, -3.0, 9.0, 3.0,
          -7.0, 0.0, 3.0, 6.0, -1.0, 0.0, -8.0, -5.0, 3.0, 6.0],
         [4.0, -1.0, 5.0, -4.0, 4.0, -3.0, 9.0, 9.0, 3.0, 3.0, 8.0, 6.0, -3.0, 9.0, 7.0, -3.0, 7.0, 8.0, -4.0, 7.0,
          -8.0, -6.0, -1.0, 5.0, 4.0, -9.0, 9.0, 6.0, -4.0, 0.0],
         [2.0, 0.0, 7.0, 3.0, 4.0, 6.0, 8.0, 0.0, 6.0, 4.0, 7.0, 9.0, 3.0, 0.0, 3.0, -8.0, 8.0, 5.0, -3.0, -9.0, 2.0,
          -7.0, 2.0, 6.0, 3.0, 4.0, -8.0, 5.0, -6.0, -4.0],
         [4.0, 7.0, 9.0, -7.0, 8.0, 0.0, -1.0, -2.0, 3.0, -4.0, -1.0, -9.0, 0.0, 1.0, -4.0, -9.0, -6.0, 2.0, 5.0, -2.0,
          0.0, 0.0, 4.0, 7.0, 2.0, 0.0, 3.0, -2.0, 5.0, -3.0],
         [0.0, -1.0, -2.0, 0.0, -4.0, -5.0, 7.0, 9.0, 0.0, 4.0, 0.0, -4.0, -8.0, -9.0, -9.0, 3.0, 2.0, 1.0, 2.0, -5.0,
          -5.0, -8.0, -7.0, 3.0, -6.0, -1.0, 3.0, 2.0, -9.0, 7.0],
         [-9.0, -5.0, 1.0, 0.0, 0.0, 4.0, 6.0, 5.0, -9.0, 2.0, -7.0, -4.0, -1.0, -9.0, -3.0, -2.0, 2.0, 6.0, -4.0, 7.0,
          -9.0, -1.0, 1.0, 4.0, 0.0, -9.0, 9.0, -7.0, 5.0, -6.0],
         [-5.0, 1.0, 4.0, -4.0, 4.0, -3.0, -7.0, -5.0, -6.0, 5.0, -1.0, 4.0, 0.0, -6.0, 1.0, 8.0, -7.0, -3.0, 4.0, 5.0,
          0.0, 3.0, -1.0, 1.0, 6.0, 8.0, -3.0, 2.0, -6.0, 0.0],
         [4.0, -4.0, -6.0, 3.0, 4.0, -5.0, 5.0, 3.0, -5.0, 8.0, -8.0, 3.0, 0.0, 7.0, -6.0, -2.0, 0.0, 8.0, 7.0, -7.0,
          -6.0, 8.0, 8.0, 5.0, 2.0, 4.0, 5.0, 2.0, 8.0, 4.0],
         [1.0, 7.0, 1.0, -2.0, 8.0, 6.0, 7.0, -8.0, -4.0, 8.0, -2.0, 4.0, 6.0, 1.0, 8.0, -6.0, 8.0, -3.0, -3.0, -6.0,
          8.0, -4.0, 2.0, -5.0, 6.0, 1.0, 2.0, -4.0, 3.0, 6.0],
         [7.0, 8.0, 8.0, 6.0, -8.0, -3.0, 6.0, -7.0, -9.0, 9.0, -2.0, 5.0, 8.0, -1.0, -5.0, -8.0, -1.0, 6.0, 9.0, 7.0,
          6.0, 1.0, 4.0, 0.0, 9.0, -3.0, 9.0, 6.0, -6.0, 7.0],
         [4.0, 0.0, -2.0, -3.0, -3.0, 8.0, 5.0, 2.0, -5.0, -7.0, 6.0, -2.0, 1.0, -6.0, -8.0, -1.0, 6.0, 2.0, -9.0, 0.0,
          5.0, -3.0, 1.0, 6.0, 1.0, -6.0, 1.0, 5.0, 2.0, -4.0],
         [4.0, -7.0, -8.0, 6.0, -6.0, -6.0, 5.0, -4.0, 0.0, 3.0, 8.0, 2.0, -3.0, 1.0, 6.0, 1.0, 7.0, 6.0, 8.0, 4.0, 9.0,
          -8.0, 2.0, -6.0, -4.0, -5.0, 9.0, -1.0, 6.0, -4.0],
         [-4.0, -6.0, 0.0, -4.0, 6.0, 7.0, 5.0, 4.0, -1.0, 0.0, -1.0, -4.0, 5.0, 5.0, -4.0, 9.0, 5.0, -4.0, 1.0, 5.0,
          0.0, -4.0, -5.0, -7.0, -4.0, 8.0, -9.0, -9.0, -1.0, 9.0],
         [9.0, 0.0, -8.0, -9.0, -1.0, -9.0, 1.0, -6.0, -2.0, 0.0, 0.0, -4.0, -2.0, -2.0, 6.0, -5.0, 6.0, -4.0, 6.0,
          -9.0, 3.0, -9.0, 3.0, -2.0, 6.0, 3.0, 5.0, -3.0, -6.0, -9.0]],  # weights 2
        [[-6.0, 6.0, -7.0, 0.0, 3.0, -2.0, -2.0, 4.0, 8.0, -5.0, 4.0, 6.0, 0.0, -2.0, 2.0, -5.0, -4.0, -4.0, 0.0, 7.0,
          0.0, 6.0, -1.0, 7.0, 2.0, 7.0, -9.0, -3.0, -7.0, -9.0],
         [2.0, 9.0, 2.0, 8.0, 4.0, -8.0, 1.0, -9.0, -6.0, 0.0, 0.0, 7.0, -2.0, 6.0, -1.0, 1.0, 3.0, -1.0, 5.0, -2.0,
          -4.0, -2.0, 3.0, -8.0, -7.0, 7.0, 8.0, -9.0, -8.0, -2.0],
         [-9.0, -3.0, 7.0, 1.0, -2.0, 7.0, -5.0, 1.0, 0.0, -9.0, -1.0, 4.0, 0.0, -8.0, 4.0, 6.0, -7.0, 9.0, 0.0, 0.0,
          -4.0, -2.0, -4.0, -3.0, 4.0, -5.0, 3.0, 1.0, 0.0, -3.0],
         [9.0, -7.0, -1.0, 5.0, -1.0, -4.0, -6.0, -8.0, 1.0, -6.0, -7.0, 4.0, 7.0, -7.0, 8.0, 2.0, -4.0, -5.0, 7.0, 2.0,
          -2.0, 4.0, -6.0, 0.0, -8.0, -4.0, 8.0, -5.0, 1.0, 8.0],
         [-3.0, 6.0, -7.0, -2.0, 5.0, 6.0, -8.0, -8.0, -5.0, 2.0, 7.0, -8.0, -7.0, 8.0, -1.0, -5.0, -1.0, 6.0, 0.0, 0.0,
          2.0, 1.0, -7.0, -4.0, -8.0, 5.0, -5.0, -8.0, -6.0, -1.0],
         [0.0, 1.0, -1.0, 1.0, -3.0, -6.0, 9.0, 0.0, 8.0, -2.0, 8.0, 4.0, 6.0, 3.0, 0.0, 7.0, -2.0, -8.0, 0.0, 0.0,
          -6.0, 0.0, -6.0, 3.0, 3.0, -4.0, -2.0, -4.0, -4.0, -1.0],
         [4.0, 5.0, -6.0, -5.0, -4.0, 1.0, 0.0, -4.0, 2.0, -6.0, -5.0, 5.0, 7.0, -2.0, 7.0, 1.0, 5.0, 5.0, -9.0, 7.0,
          -9.0, -6.0, -9.0, 6.0, 9.0, 1.0, -1.0, 5.0, -9.0, 5.0],
         [8.0, -2.0, 2.0, 6.0, 0.0, 1.0, 9.0, 0.0, 4.0, 0.0, 0.0, 6.0, -4.0, 6.0, -1.0, 3.0, -7.0, -9.0, 7.0, 3.0, -3.0,
          8.0, -3.0, -6.0, -3.0, 3.0, -6.0, -1.0, -8.0, 7.0],
         [-6.0, -8.0, 7.0, -4.0, -1.0, -9.0, -9.0, -7.0, 1.0, -7.0, 3.0, 9.0, -8.0, 6.0, 4.0, -3.0, -1.0, 9.0, 5.0, 0.0,
          4.0, -9.0, -1.0, 6.0, -9.0, -9.0, 1.0, 2.0, -7.0, -7.0],
         [7.0, 8.0, 1.0, -9.0, 6.0, -8.0, 0.0, -1.0, 4.0, -3.0, 3.0, 0.0, 3.0, 6.0, 0.0, 1.0, -5.0, 3.0, 0.0, 7.0, 9.0,
          -8.0, 1.0, 5.0, -9.0, 0.0, -7.0, -9.0, 9.0, -9.0],
         [-5.0, 6.0, 5.0, 5.0, -3.0, -8.0, 5.0, -4.0, 8.0, 7.0, 5.0, -6.0, 3.0, 6.0, -5.0, 0.0, -5.0, -4.0, 7.0, -9.0,
          -5.0, -1.0, 0.0, 1.0, -1.0, 2.0, -6.0, -2.0, -5.0, 9.0],
         [5.0, -2.0, -6.0, 6.0, -4.0, -8.0, 8.0, -3.0, 3.0, -9.0, 9.0, 0.0, 5.0, -1.0, 2.0, -4.0, 4.0, -6.0, -9.0, 2.0,
          -5.0, -5.0, 2.0, 0.0, -8.0, -6.0, 0.0, -1.0, 2.0, -6.0],
         [-6.0, 3.0, -3.0, -3.0, 0.0, -2.0, -2.0, 7.0, -8.0, 1.0, 6.0, 0.0, 2.0, -9.0, -1.0, 7.0, 1.0, -4.0, -2.0, -3.0,
          -8.0, 1.0, -2.0, 1.0, 7.0, -9.0, -9.0, 1.0, 0.0, -1.0],
         [-1.0, -9.0, -6.0, 0.0, 2.0, -1.0, 1.0, 2.0, 4.0, 7.0, 5.0, -1.0, 4.0, -7.0, -4.0, 3.0, 6.0, 3.0, -1.0, 0.0,
          -2.0, -4.0, -4.0, -1.0, -4.0, 1.0, -8.0, 7.0, 1.0, -2.0],
         [-3.0, -2.0, -4.0, -5.0, 9.0, -7.0, 6.0, 9.0, -7.0, 4.0, -5.0, -1.0, 0.0, 0.0, -2.0, 6.0, -5.0, 3.0, -1.0,
          -3.0, 3.0, -9.0, 8.0, 0.0, 3.0, 0.0, 8.0, -7.0, -3.0, 3.0],
         [-4.0, -7.0, 5.0, -7.0, 0.0, -4.0, 0.0, 5.0, -1.0, 8.0, 5.0, -4.0, 8.0, 4.0, 0.0, 9.0, -8.0, 2.0, -2.0, 8.0,
          3.0, -4.0, -3.0, 6.0, 0.0, 0.0, 3.0, -3.0, 2.0, -8.0],
         [8.0, 8.0, 8.0, -7.0, -8.0, 8.0, 6.0, 0.0, 4.0, -7.0, -5.0, -3.0, -6.0, 0.0, 7.0, -8.0, -5.0, 8.0, -9.0, -7.0,
          5.0, -5.0, 1.0, -3.0, -1.0, 8.0, 5.0, -9.0, -8.0, 0.0],
         [-4.0, -5.0, -9.0, -6.0, 0.0, 5.0, 9.0, -3.0, 1.0, -5.0, -8.0, 0.0, 5.0, -7.0, 3.0, 5.0, 5.0, -6.0, 5.0, 9.0,
          6.0, 0.0, -5.0, -8.0, -8.0, 3.0, 2.0, 8.0, 6.0, 9.0],
         [-1.0, 4.0, 6.0, -5.0, 5.0, 7.0, -3.0, 5.0, 5.0, 9.0, 7.0, 6.0, 5.0, 1.0, 4.0, 6.0, -9.0, 2.0, 0.0, 3.0, 1.0,
          -8.0, -6.0, -7.0, -7.0, -2.0, 3.0, 2.0, 1.0, -4.0],
         [2.0, 5.0, -6.0, -4.0, 0.0, 0.0, 3.0, -3.0, 7.0, 2.0, 5.0, 8.0, 6.0, -8.0, 6.0, -9.0, 8.0, 8.0, 5.0, -9.0,
          -8.0, 4.0, 7.0, -4.0, 6.0, -5.0, 1.0, -2.0, -3.0, -3.0],
         [-1.0, -3.0, 6.0, -8.0, 1.0, 3.0, -3.0, 5.0, -6.0, -4.0, -3.0, 8.0, -8.0, 1.0, 1.0, 0.0, -6.0, 1.0, -4.0, 9.0,
          7.0, 1.0, 9.0, -7.0, 8.0, 3.0, 4.0, -9.0, 2.0, -6.0],
         [-6.0, 1.0, 8.0, -2.0, 9.0, -1.0, 6.0, -2.0, -1.0, -1.0, -9.0, 3.0, 4.0, 3.0, -4.0, 0.0, 0.0, -9.0, -3.0, -9.0,
          -8.0, 6.0, 1.0, 7.0, 0.0, 4.0, 3.0, 0.0, -9.0, 2.0],
         [-2.0, 0.0, 9.0, -8.0, 0.0, 5.0, 6.0, 7.0, -2.0, 4.0, 4.0, 9.0, 3.0, 5.0, 2.0, 0.0, 8.0, 4.0, -3.0, 0.0, 7.0,
          -4.0, -5.0, -7.0, 8.0, -9.0, 9.0, 0.0, 4.0, -3.0],
         [8.0, 4.0, -9.0, 8.0, 8.0, 3.0, 2.0, 3.0, -8.0, 3.0, -4.0, 0.0, -4.0, 8.0, 6.0, 6.0, -6.0, -7.0, 7.0, 4.0,
          -3.0, -2.0, -8.0, 9.0, -2.0, 5.0, 3.0, 0.0, -6.0, 9.0],
         [7.0, -6.0, -6.0, -4.0, -7.0, 3.0, 8.0, -4.0, -3.0, 3.0, -2.0, -9.0, 6.0, -9.0, 7.0, -8.0, -8.0, 8.0, -4.0,
          -5.0, 6.0, -5.0, -4.0, 6.0, 6.0, -8.0, -1.0, 1.0, -7.0, 2.0],
         [-1.0, -1.0, 8.0, -6.0, 2.0, 8.0, 1.0, 3.0, 5.0, 9.0, -4.0, 5.0, 7.0, 5.0, -9.0, 8.0, 3.0, 8.0, -5.0, -6.0,
          6.0, -7.0, 1.0, 2.0, 5.0, 4.0, 6.0, -8.0, 6.0, 5.0],
         [9.0, 4.0, 5.0, 5.0, -4.0, 6.0, 0.0, 4.0, 9.0, -7.0, 5.0, 5.0, 4.0, 4.0, 0.0, -9.0, 0.0, 0.0, 7.0, 0.0, 7.0,
          -1.0, 9.0, 3.0, 8.0, 9.0, -7.0, 0.0, -1.0, 0.0],
         [8.0, -5.0, 8.0, -3.0, -6.0, 5.0, -2.0, 6.0, 4.0, -7.0, 0.0, -1.0, 0.0, -8.0, 0.0, 1.0, -8.0, -5.0, 0.0, 8.0,
          -8.0, 1.0, -2.0, -2.0, 2.0, 0.0, 0.0, 4.0, 0.0, 8.0],
         [-7.0, 0.0, 1.0, 7.0, -3.0, 8.0, 2.0, -9.0, 0.0, 4.0, 5.0, 0.0, -5.0, 2.0, -2.0, 2.0, -2.0, -7.0, 9.0, 0.0,
          1.0, 0.0, -2.0, -3.0, 6.0, 1.0, 6.0, 9.0, 7.0, -3.0],
         [-4.0, 9.0, -3.0, 7.0, 7.0, -7.0, -1.0, 3.0, 5.0, -1.0, 3.0, 5.0, 3.0, -8.0, -2.0, -3.0, -9.0, 5.0, 6.0, -6.0,
          7.0, 8.0, -3.0, 2.0, 6.0, -9.0, -6.0, 1.0, -1.0, -8.0]],  # weights 3
        [[8.0, -3.0, 0.0, -9.0, -1.0, -1.0, 0.0, -7.0, 6.0, -2.0, 4.0, -1.0, 6.0, 1.0, 9.0, 1.0, 1.0, -8.0, 0.0, -6.0,
          6.0, 7.0, 1.0, 3.0, -3.0, -6.0, 9.0, -2.0, -5.0, 0.0],
         [0.0, 1.0, 9.0, 9.0, 8.0, 0.0, -7.0, -1.0, -3.0, 2.0, -2.0, -5.0, 2.0, -3.0, 2.0, -5.0, -9.0, 1.0, 7.0, -5.0,
          -1.0, -9.0, 5.0, -1.0, 0.0, 9.0, 1.0, 9.0, 4.0, -4.0],
         [1.0, 7.0, 8.0, -6.0, 3.0, -1.0, 8.0, -9.0, 5.0, 1.0, -6.0, 0.0, 4.0, 0.0, 3.0, -3.0, -6.0, 8.0, 0.0, 5.0,
          -5.0, -4.0, 4.0, -2.0, 0.0, -5.0, -6.0, -7.0, 0.0, -1.0],
         [-8.0, 7.0, -1.0, -3.0, -6.0, 0.0, -6.0, -1.0, 2.0, -2.0, 8.0, -2.0, 0.0, 0.0, -4.0, 4.0, -6.0, 9.0, 5.0, 5.0,
          2.0, 1.0, 8.0, -6.0, -3.0, -7.0, -7.0, 0.0, -4.0, 9.0]]  # Weights 4
    ]
    biases = [
        [[1.0], [9.0], [8.0], [7.0], [7.0], [2.0], [-6.0], [0.0], [-8.0], [6.0], [-9.0], [5.0], [-5.0], [0.0], [0.0],
         [8.0], [5.0], [-8.0], [-5.0], [-1.0], [9.0], [-4.0], [-6.0], [-3.0], [4.0], [3.0], [2.0], [7.0], [-2.0], [9.0]],  # biases 1
        [[-6.0], [3.0], [-1.0], [1.0], [-4.0], [5.0], [-2.0], [-1.0], [5.0], [5.0], [4.0], [6.0], [-9.0], [5.0], [3.0],
         [-2.0], [5.0], [-4.0], [-8.0], [3.0], [-7.0], [5.0], [1.0], [0.0], [9.0], [-8.0], [0.0], [2.0], [9.0], [9.0]],  # biases 2
        [[-2.0], [-8.0], [5.0], [1.0], [-4.0], [6.0], [-3.0], [6.0], [7.0], [8.0], [3.0], [-7.0], [3.0], [6.0], [1.0],
         [8.0], [-4.0], [2.0], [4.0], [-1.0], [5.0], [1.0], [-5.0], [6.0], [-7.0], [5.0], [-4.0], [-4.0], [9.0], [3.0]],  # biases 3
        [[5.0], [3.0], [-7.0], [3.0]]  # biases 4
    ]
    relu_list = [
        True,  # relu 1
        True,  # relu 2
        True,  # relu 3
        False  # relu 4
    ]
    """

    # Problem 5
    layers = 3
    weights = [
        [[-8.0], [2.0], [-9.0], [4.0]],  # weights 1
        [[8.0, 0.0, 6.0, 4.0], [8.0, -6.0, -3.0, -7.0], [-7.0, -7.0, -4.0, -4.0]],  # weights 2
        [[5.0, -7.0, 6.0]]
    ]
    biases = [
        [[9.0], [7.0], [1.0], [5.0]],  # biases 3
        [[0.0], [-8.0], [5.0]],
        [[0.0]]
    ]
    relu_list = [
        True,
        True,
        False
    ]

    input_matrix = [[1.0]]
    print(forward_prop(input_matrix, layers, weights, biases, relu_list))
    # input = cem(200, 1e-07, input_matrix, layers, weights, biases, relu_list)
    # print(input)
    # for i in range(0, len(input)):
    #     input_matrix[i][0] = input[i]
    # Solution for problem 1: [-1.3333321788809331]
    # Solution for problem 2: [0.8048888916854697, -0.8779657897235943, 0.13916016476306775, 0.005356182326711711]
    # Solution for problem 3: [0.9501606991820927, -0.11402912196544285, 0.9778135044964037, 2.3506763240711104, 1.106672362225133, -0.5924871174367804]
    # Solution for problem 4: [-0.29729729937219657]
    # Solution for problem 5: [1.0969564421117617, 0.37523220966214, 0.44414789489719153, -0.5067749421930664]
    # Solution for problem 6: [1.652293417398273, -0.3004110719521273, 0.8148014101501757, 0.40030587542008106, -0.19631245915851725, -0.2625241800215547, 0.13199644936971686, -1.3337856184134171, -0.3576001630081491, 0.5738708601778866, 3.017086829929259, 0.1150429127687122, 0.2280865617677739, -3.0592388869090654, -0.9575675670909432, -0.08092144927268358, 3.1357572318464015, -1.6505307267682061, 3.2801355367398055, -0.7155188646300334, 0.11692360089627808, 0.3057869939039281, 1.0450694653342716, 2.3691798355454985, 0.7261758984058049, -0.056099063137471455, 1.1014026385001958, 1.240373349946991, -0.3375376520016156, 0.42293493000600313, 0.06585181119685489, -2.5808667571483013, -1.8065817692547739, 2.496315628843804, -1.0603459965416975, 0.6399565108134814, 0.6144991588679924, -2.0478193076753675, 0.6557810539833504, 2.352521322808612, -4.137943740048814, 0.6591391152306323, 0.30786457677873935, 1.4974922053476862, -1.6679309907532218, 0.6267725258281195, -0.7493429708117576, -1.484118102797127, 0.7116268360776021, -1.049607552744212, -0.585752974048334, -0.6898427215361559, -2.3173447146451167, 3.0314296405241503, -1.9463089320370934, -1.7888374313048399, 0.8910055662462345, 0.4665086303035235, -1.3812913896103511, 2.408308421424942, -1.1772731600880397, 0.26862086480683145, 0.9325636688602499, 1.0593306619185598, 0.9557501485636662, -0.19726216586270154, -2.2299288619883852, 2.2726061364187022, 0.541462335260904, -0.9319026095054442, -0.5297710419566178, -0.7034778308811062, 0.22941421663934577, -0.8947869869306463, 1.610923920365019, -1.9972197804588976, 1.2643371341450673, 0.28906322090650455, -2.3207582869553174, -0.657395779639986, 0.05741206418253812, 2.601445919693157, -1.4378426009579948, 1.0904588263473587, 0.09880105978405285, 0.3617751060215851, 2.2559959106576746, 0.039798812453966936, 0.38409892682133717, -0.2540009170552826, -3.9159997662521278, -1.1677621790901533, -0.7209441544833356, 0.07170825382170097, -1.022994703126749, -0.3087580385160307, 0.4512700745432629, 0.7353042823297882, -0.7492029969615516, -1.1502345394334492]
    # Solution for problem 7: [-0.2703353712786728, -1.5893834133974007, -0.6062926909659253, -0.5542852115133662, 2.999045381573246, 0.6909297637564764, -1.029306818617841, -1.2400991318364123, -1.1262253977531145, 1.6251287592089882]
    # Solution for problem 8: [0.3435082170792922, 1.6488751632330532, -0.5181918929291089, 0.2549582532253436, 0.11091325916851691, -1.466126851150725, -1.252238188123686, 1.5685338143724092, -0.8489782192785996, -1.8379698211640167, -0.14646631242414815, -1.302530111451886, -0.4275418642748957, 2.2621077720167944, -0.6072946392708285, -0.13560623387807205, -1.4370946172419148, 0.06494479263938048, 1.2616190092251716, 1.268997533717261]
    # Solution for problem 9: [-0.48348444765435794, -1.3356979500928319, -1.193179739000313, -0.6324164678566071, 0.8671900627359851, 1.421215391887255, -1.5611284166036143, -1.5315990766815155, 1.4589884953813788, 0.9457870690630267, 1.4831367843332794, 2.249585851863386, -1.0222989917731988, -2.1273878588403012, -2.0808942105159915, -0.9150901983228499, -0.4705020074393306, -1.4308683317828212, -0.22224440615381671, -1.4482431504140203]
    # Solution for problem 10: [-0.5791431917624561, -0.4182905439086707, 0.5616054119419207, -0.15584404868497964, -1.0141516047847847, -0.069143478369543, -1.1747326516093322, 0.1338703969483152, -0.6044405976510969, 0.16775460149987087, -0.8343851519452157, -0.08154584732700662, -1.16386977641781, 1.22341829599803, -2.113925594102946, -0.5787711253955281, 1.875192244781657, -0.23358846507362763, -1.8366604137386895, -0.8285224797621088, 1.331967002300723, -0.5716870956257131, -0.5781457671715136, -0.3685624498367019, 0.6767530997794892, 0.4752091296304024, -0.3767731222807697, 1.5076521730166734, -0.9249400306201206, 0.36879389758271836]
    # input_matrix = result.copy()
    """
    output = forward_prop(input_matrix, layers, weights, biases, relu_list)
    print(output)
    result_sum = 0
    for i in range(0, len(output)):
        result_sum += abs(output[i][0])
    print(result_sum)
    """